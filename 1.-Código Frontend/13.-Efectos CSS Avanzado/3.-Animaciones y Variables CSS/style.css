@import url('https://fonts.googleapis.com/css?family=Fjalla+One&display=swap');
/* font-family: 'Fjalla One', sans-serif; */

/*VARIABLES CSS: Estas se deben crear dentro del documento css y es como cualquier otra variable, lo que hará es 
guardar un tipo de valor, este valor puede ser un color, un tiempo (para los transition), una imagen, etc*/
/*Las variables css se deben meter dentro de un selector, un selector es cualquier clase, id o elemento en general 
que seleccionamos en el documento CSS para cambiarle algo, un ejemplo de selector es body {}, #nombreId{} o 
.nombreClase{}, esto se debe hacer así porque lo que en realidad estamos haciendo es crear una nueva propiedad 
como background-color, color, font-size o cualquier otra, estamos inventando una de esas. Para declarar variables 
se puede usar el selector body{} o el selector :root{}, es mejor usar el selector root porque este no accede solo 
al body de mi documento html, sino a todo el documento HTML, desde la etiqueta principal <!DOCTYPE html>*/


body{
    /*Dentro de body podemos guardar las variables que queramos con la siguiente sintaxis:
    --nombreVariable: valorDeLaVariable; */
    --color: cornflowerblue;/*Cuando haga esto Visual Studio Code no me ayudará a poner el color como siempre :(*/
    /*Yo puedo poner mis variables dentro de cualquier clase, id o selector general pero siempre es mejor tenerlos 
    todos dentro de root o body*/
    margin: 0px;
    padding: 0px;
    /*Para usar cualquier variable debo usar la instrucción var() en donde debería poner el valor de mi propiedad CSS 
    con la siguiente sintaxis:
    propiedad: var(--nombreVariable);*/
    background-color: var(--color);
}


/*UNIDADES CSS: Se usarán mucho en las variables, por eso es importante entender bien cada una
-px: Significa pixel y siempre será el mismo tanaño no importando el tamaño de la pantalla donde se vea, el problema
es que esto puede hacer que nuestro diseño se vea más pequeño o más grande en diferentes pantallas al querer mantenerse 
siempre igual

-%: El porcentaje se puede usar en elementos hijo para decir el width(ancho) y height(alto), pero no se puede usar
en el height de un elemento padre, aunque si se puede usar en su width y ésto se adaptará a cualquier pantalla

-vw: Sirve para indicar que el ancho del elemento siempre sea respecto al tamaño de la pantalla, 1vw equivale a 1% 
del ancho de la pantalla

-vh: Sirve para indicar que la altura del elemento siempre sea respecto al tamaño de la pantalla, 1vh equivale a 1% 
de la altura de la pantalla

-rem: Hace que el tamaño de mi letra sea referido respecto al tanaño default que tiene mi documento html, osea al 
tamaño que tienen todas las letras del body por default

-em: Hace que el tamaño de mi letra sea referido respecto al tanaño que tiene la clase padre del elemento donde se 
encuentra mi texto, osea que si estoy usando un elemento que no está contenido dentro de otro, solo que está dentro 
del body, el tamaño que tienen todas las letras serán referidas al tamaño de las letras en el body por default, pero 
si estoy dentro de un elemento, el tamaño de la letra será respecto al tamaño que tiene mi elemento padre directo

em y rem se usan más que nada para letras pero también se pueden usar para cualquier otro elemento*/

.clasePadre{
    font-size: 1.5rem;
}

.unidad-rem{
    font-size: 2rem;
}

.unidad-rem{
    font-size: 2rem;
}

#unidad-em{
    font-size: 2em;
}

#unidad-em{
    font-size: 2em;
}

header{
    margin: 0px;
    padding: 0px;
}

/*Aquí se está usando la herencia de dos elementos que están contenidos uno dentro de otro, ul que tiene todos los 
elementos li se encuentra dentro de nav*/
nav ul{
    margin: 0px;
    background-color: rebeccapurple; 
    display: flex;
    justify-content: space-around;
    width: 100%;
}

a{
    text-decoration: none;
    color: white;
    font-size: 2rem;/*Tamaño del texto respecto al default del tamaño de letra del body*/
}

/*Las ANIMACIONES se realizan con la instrucción @keyframes y la sintaxis es la siguiente:
    @keyframes nombreAnimación{
        from{
            estado inicial de la propiedad que quiero que cambie durante mi animación
        }
        to{
            estado final de la propiedad que quiero que cambie durante mi animación
        }
    }

Esto también se puede hacer poniendo porcentajes y lo que hará es agregar más pasos o estados a mi animación, indicándole
qué es lo que tiene que hacer en cada estado de tiempo de mi animación

    @keyframes nombreAnimación{
        0%{
            estado inicial de la propiedad que quiero que cambie durante mi animación
        }
        50%{
            estado de la propiedad a la mitad de mi animación
        }
        100%{
            estado final de la propiedad que quiero que cambie durante mi animación
        }
    }
*/
@keyframes nombreAnimacion{
    0%{
        /*Esto lo que hará es sacar de la pantalla mi navbar hacia arriba (posteriormente cuando use esta animación)*/
        transform: translateY(-100%);
    }
    100%{
        /*Esto lo que hará es regresar mi navbar a la pantalla en su posición inicial*/
        transform: translateY(0%);
    }
}
/*Luego, para que se ejecute mi animación debo poner en el elemento que quiero que muestre mi animación (osea div, 
párrafo, link, etc.) la palabra reservada animation, seguida de los siguientes parámetros para indicar algunos detalles 
de cómo quiero que se ejecute mi animación:
animation: animation-name   animation-duration  animation-timing-function   animation-delay ...
           animation-iteration-count    animation-direction    animation-fill-mode;

-animation-name: Aquí se indica el nombre que previamente le había dado a la animación en mi @transitions

-animation-duration: Sirve para indicar el tiempo que quiero que dure la animación completamente en llegar desde from 
 hasta to o desde 0% hasta 100%

-animation-timing-function sirve para indicar la manera en la que quiero que se haga la animación:
    ease: Especifica un efecto de animación con un inicio lento, luego rápido, luego finaliza lentamente 
    (este es el modo predeterminado).
    linear: Especifica un efecto de animación con la misma velocidad de principio a fin.
    ease-in: Especifica un efecto de animación con un inicio lento solamente.
    ease-out: Especifica un efecto de animación con un final lento solamente.
    ease-in-out: Especifica un efecto de animación con un inicio y un final lentos.

-animation-delay: sirve para indicar cuanto tiempo debe estar el mouse encima del elemento para que se active el efecto

-animation-iteration-count sirve para especificar cuántas veces se va a ejecutar mi animación:
    se puede poner un número entero: 1, por default este vale siempre 1, por lo que la animación se ejecuta solo una vez
    se puede poner un número 2.5: esto haría que se ejecute 2 veces completas y una vez solo la mitad
    infinite: hace que la animación se ejecute infinitamente

-animation-direction sirve para indicar la dirección de mi animación, osea si va de 0 a 100% o de from hacia to o de 
 100% hacia 0% o de to hacia from, o igual si va y viene yendo de 0% a 100% y cuando esté en 100% va de 100% a 0%:
    normal: hace que la animación vaya de 0 a 100% o de from hacia to
    alternate: hace que inicialmente la animación vaya de 0 a 100% pero que cuando llegue a 100% ahora vaya de 100% a 0%
    
-animation-fill-mode sirve para indicarle al navegador que va a hacer antes y después de que la animación se ejecute:
    none: hace que cuando la animación acabe el elemento vuelva a su posición original, esto puede verse feo porque hace 
          que el elemento se teletransporte de un lugar a otro cuando acabe la animación 
    forward: hace que cuando la animación acabe el elemento se quede en donde lo dejó la animación en su estado final

    elemento{
        animation: nombreAnimación duraciónAnimación
    } 
*/

/*EJEMPLO 1: ANIMACIÓN QUE SE EJECUTARÁ UNA SOLA VEZ CUANDO CARGUEMOS NUESTRA PÁGINA EN NUESTROS TEXTOS Y NAVBAR*/
/*En este elemento es donde introduciremos nuestra animación*/
nav {
    margin: 0px;
    padding: 0px;
    background-color: plum; 
    height: 20vh; 
    margin-top: 0%; 
    color: white;
    display: flex;
    align-items: center;
    /*La animación llamada nombreAnimación durará 300 milisegundos y tendrá un inicio y fin alentados por la instrucción
    ease-in-out*/
    animation: nombreAnimacion 300ms ease-in-out;
}
/*Ahora vamos a crear una animación para los links que haga que los elementos de las esquinas se deslicen hacia su lugar 
y el elemento de en medio solo aparezca en su lugar*/
/*Esta primera animación sirve para que aparezca el elemento de en medio*/
@keyframes aparecerElementosNavbar{
    0%{
        /*Esto hace que el elemento al inicio de la animación no aparezca en pantalla porque está reducido a cero*/
        transform: scale(0);
    }
    90%{
        /*Esto hace que el elemento un poco antes de que acabe la animación crezca un poco de más para dar un efecto 
        extra*/
        transform: scale(1.3);
    }
    100%{
        /*Y al final simplemente se quedará con una escala de 1, osea el tamaño original del elemento*/
        transform: scale(1);
    }
}
/*Aquí se está usando la herencia de dos elementos que están contenidos uno dentro de otro, il que tiene cada elemento
enlistado se encuentra dentro de nav, que a la vez se encuentra dentro de ul, pero no se puede hacer herencia de 3 
niveles por eso se hace directo a li desde nav*/
nav li{
    list-style: none;/*Esto quita el enlistado de todos los elementos, osea el puntito que lleva cada uno*/
    /*Aquí indicaré por partes las características de mi animación para que se ejecuten en los elementos li que estén
    dentro de nav en mi documento HTML*/
    animation-name: aparecerElementosNavbar;/*Con esto hago que se ejecute la animación aparecerElementosNavbar*/
    animation-duration: 400ms;/*Se usa para indicar el tiempo que tardará toda la simulación en ejecutarse*/
    animation-timing-function: ease-in;/*Especifica un efecto de animación con un inicio lento solamente*/
    animation-delay: 300ms;/*Especifica cuánto tiempo debe pasar para que se empiece a ejecutar mi animación*/
    /*Hasta aquí todo funcionaría bien pero el problema es que en un inicio mis elementos aparecerían en pantalla y 
    después desaparecerían para que se ejecute la animación, nosotros queremos que en un inicio los elementos no 
    aparezcan en pantalla por lo que debemos dar un estado inicial al elemento de scale(0)*/
    transform: scale(0);
    /*Ahora debemos usar animation-fill-mode para que mi elemento no se regrese a este estado de scale(0)*/
    animation-fill-mode: forwards;
    /*Hace cuando se acabe la animación, la propiedad que mi animación cambió se quede en el estado que la dejó*/
}
nav li:hover{
    background-color: rgba(128, 0, 128, 0.466);
}
/*Esto es para animar el primer elemento del navbar para que se deslice una vez de derecha a izquierda hacia su lugar*/
@keyframes deslizaPrimerElementoNavbar{
    0%{
        transform: translateX(-1000%);/*Esto va a sacar mi 1er elemento a la izquierda para que no se vea en pantalla*/
    }
    90%{
        transform: translateX(50%);
        /*Es para dar un efecto adicional y que se pase un poco a la derecha de su posición original antes de que 
        termine la animación*/
    }
    100%{
        transform: translateX(0%);/*Esto va a regresar mi 1er elemento a su lugar original*/
    }
}
/*Con la instrucción :first-child lo que hago es ingresar específicamente al 1er elemento que sea del tipo li y que esté
contenido dentro de nav, esto le dará un efecto especial a este elemento*/
nav li:first-child{
    /*Casi siempre es mejor indicar cada característica de la animación individualmente*/
    animation-name: deslizaPrimerElementoNavbar;
    animation-fill-mode: forwards;
    transform: translateX(-1000%);/*Esto hace que en un inicio no aparezca el primer elemento del navbar*/
}
/*Esto es para animar el último elemento del navbar y hacer que se deslice una vez de izquierda a derecha hacia su lugar*/
@keyframes deslizaUltimoElementoNavbar{
    0%{
        transform: translateX(1000%);/*Esto va a sacar mi 3er elemento a la derecha para que no se vea en pantalla*/
    }
    90%{
        transform: translateX(-50%);
        /*Es para dar un efecto adicional y que se pase un poco a la izquierda de su posición original antes de que 
        termine la animación*/
    }
    100%{
        transform: translateX(0%);/*Esto va a regresar mi 1er elemento a su lugar original*/
    }
}
/*Con la instrucción :last-child lo estoy haciendo es ingresar específicamente al último elemento que sea del tipo li y 
que esté contenido dentro de nav*/
nav li:last-child{
    /*Casi siempre es mejor indicar cada característica de la animación individualmente*/
    animation-name: deslizaUltimoElementoNavbar;
    animation-fill-mode: forwards;
    transform: translateX(1000%);/*Esto hace que en un inicio no aparezca el último elemento del navbar*/
}
/*Esta animación lo que hará es hacer que el texto aparezca en mi documento html y se mueva a su lugar desde una 
posición inicial ligeremente movida hacia arriba*/
@keyframes efectoTexto{
    0%{
        transform: translateY(-20px);
        opacity: 0;
    }
    100%{
        transform: translateY(0);
        opacity: 1;
    }
}
h1, h3{
    /*En un inicio queremos que el texto esté ligeramente movido para que se vea su animación*/
    transform: translateY(-20px);
    /*Y que sea totalmente transparente*/
    opacity: 0;
    /*También se pueden poner todas las características de la animación de jalón*/
    animation: efectoTexto 300ms ease 800ms forwards;
}
/*Reutilizo la animación que usé en el primer elemento de mi navbar para que todos mis textos aparezcan de izquierda 
a derecha*/
p{
    animation: deslizaPrimerElementoNavbar 0.8s ease-in-out 800ms forwards;
    transform: translateX(-1000%);/*Esto hace que en un inicio no aparezca el texto en pantalla*/
}



/*EJEMPLO 2: ANIMACIÓN QUE SE EJECUTARÁ INFINITAMENTE PARA MOSTRAR UN FONDO DE COLOR CAMBIANTE*/
/*Dentro de root vamos a crear un linear-gradient personalizado para tener un fondo más colorido*/
:root{
    /*Puedo declarar una variable que guarde muchos colores poniendo la palabra reservada linear-gradient, la orientación
    que tendrá el gradiente y los colores que la conformarán separados por comas, todo dentro de su paréntesis*/
    --gradienteAmaRojo: linear-gradient(
        45deg,
        #845ec2,
        #d65db1,
        #ff6f91,
        #ff9671,
        #ffc75f,
        #f9f871
    );

    /*Puedo tener variables diferentes que desplieguen diferentes colores con diferentes direcciones*/
    --gradienteAzul: linear-gradient(
        135deg,
        rgb(196, 231, 255),
        #26C2F1,
        #00ADED,
        #0579C2,
        rgb(15, 77, 163),
        #1C4175,
        rgb(14, 44, 85),
        #000936,
        #02001a
    );
}
/*Aquí se darán simples estilos al div que contenedor, al texto dentro del div y al botón dentro del div*/
#fondoCambiante1{
    width: 70%;
    margin: 10%;
    height: 30vh;
    background-color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    box-shadow: 20px 20px 30px rgb(31, 31, 31);
    padding: 5%;
}
.titulo1{
    text-transform: uppercase;
    font-family: 'Fjalla One', sans-serif;
    font-weight: 900;
    font-style: italic;
    font-size: 5rem;
    color: tomato;
    margin: 0px;
}
.botonFun1{
    width: 30%;
    height: 10vh;
    border: solid 2px salmon;
    font-family: 'Fjalla One', sans-serif;
    font-size: 2rem;
    /*Aquí mandaré a llamar mi variable tipo gradiente de colores, esto lo debo hacer usando la instrucción 
    background-image así como lo tenía que hacer cuando usaba la instrucción linear-gradient normal*/
    background-image: var(--gradienteAmaRojo);/*Como estoy usando una variable debo usar la instrucción var(--nombreVar)*/
    /*Las background-image no pueden ser manejadas con transision y no pueden cambiar lentamente tampoco*/
    transition: background-image 200ms ease-in-out;
}
.botonFun1:hover{
    /*Como las background-image no pueden ser una propiedad que pueda ser cambiada lentamente, el transition anterior
    simplemente será ignorado cuando haga este hover*/
    background-image: var(--gradienteAzul);
}

/*La propiedad background-image es una de las pocas que no pueden tener un transition porque es una imagen, pero 
lo que sí se puede hacer es agrandarla muchísimo y hacer una animación que lentamente la mueva de un lado a otro 
por medio de la propiedad background-position que si puede ser alterada, de esta manera es como logramos hacer 
una animación de este tipo*/
@keyframes efectoColorFondo{
    0%{
        background-position: left;/*inicialmente el fondo agrandado estará en la posición izquierda*/
    }
    100%{
        background-position: right;/*al finalizar la animación, el fondo agrandado estará en la posición derecha*/
    }
}

#fondoCambiante2{
    width: 70%;
    margin: 10%;
    height: 30vh;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    box-shadow: 20px 20px 20px black;
    padding: 5%;
    /*Aquí mandaré a llamar mi variable tipo gradiente de colores, esto lo debo hacer usando la instrucción 
    background-image así como lo tenía que hacer cuando usaba la instrucción linear-gradient normal*/
    background-image: var(--gradienteAzul);/*Como estoy usando una variable debo usar la instrucción var(--nombreVar)*/
    /*Lo que haré para poder animarla es primero agrandar el tamaño del fondo muchísimo con la propiedad background-size*/
    background-size: 300%;
    /*Y luego posicionar mi fondo a la derecha o a la izquierda inicialmente*/
    background-position: left;
    /*Luego mando a llamar a mi animación para poder usarla*/
    animation-name: efectoColorFondo;/*Con esto hago que se ejecute la animación efectoColorFondo*/
    animation-duration: 20s;/*Se usa para indicar el tiempo que tardará toda la simulación en ejecutarse*/
    animation-iteration-count: infinite;/*Sirve para especificar cuántas veces se va a ejecutar mi animación*/
    animation-timing-function: ease-in;/*Especifica un efecto de animación con un inicio lento solamente*/
    animation-direction: alternate;
    /*Sirve para indicar la dirección de la animación, en específico usar alternate hace que inicialmente la animación 
    vaya de 0 a 100% pero que cuando llegue a 100% ahora vaya de 100% a 0%*/
}
.titulo2{
    text-transform: uppercase;
    font-family: 'Fjalla One', sans-serif;
    font-weight: 900;
    font-style: italic;
    font-size: 5rem;
    color: lightblue;
    margin: 0px;
}
.botonFun2{
    width: 30%;
    height: 10vh;
    border: solid 2px salmon;
    font-family: 'Fjalla One', sans-serif;
    cursor: pointer;
    font-size: 2rem;
    /*Aquí mandaré a llamar mi variable tipo gradiente de colores, esto lo debo hacer usando la instrucción 
    background-image así como lo tenía que hacer cuando usaba la instrucción linear-gradient normal*/
    background-image: var(--gradienteAmaRojo);/*Como estoy usando una variable debo usar la instrucción var(--nombreVar)*/
    /*Las background-image no pueden ser manejadas con transision y no pueden cambiar lentamente tampoco, pero lo que 
    si puede ser manejado es la posición, por eso si agrando la imagen de fondo con background-size y luego pongo 
    background-position para indicar su posición inicial, esto podrá ser cambiado lentamente si le aplico un transition 
    a la propiedad background-position y parecerá como si estuviera un efecto de gradiente en el botón aunque no es así*/
    background-size: 300%;/*Agrando muchísimo la background image*/
    background-position: left;/*Le doy una posición inicial*/
    transition: background-position 0.5s ease-in-out;/*A la posición si le puedo aplicar un transition*/
}
.botonFun2:hover{
    /*El transition simplemente moverá el fondo de lugar haciendo que parezca como si fuera un efecto con el gradiente*/
    background-position: right;
}